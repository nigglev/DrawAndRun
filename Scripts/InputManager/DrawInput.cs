//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/InputManager/DrawInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @DrawInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @DrawInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""DrawInput"",
    ""maps"": [
        {
            ""name"": ""DrawPanel"",
            ""id"": ""fead9c23-ecab-4185-bfd1-2d92bfe5f314"",
            ""actions"": [
                {
                    ""name"": ""Draw"",
                    ""type"": ""Button"",
                    ""id"": ""ab80ba8b-fc10-441f-b2e8-90cf77cc15d8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6bdb0454-7cdd-42ab-bfef-86433f76c566"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""DrawInput"",
                    ""action"": ""Draw"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""DrawInput"",
            ""bindingGroup"": ""DrawInput"",
            ""devices"": []
        }
    ]
}");
        // DrawPanel
        m_DrawPanel = asset.FindActionMap("DrawPanel", throwIfNotFound: true);
        m_DrawPanel_Draw = m_DrawPanel.FindAction("Draw", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // DrawPanel
    private readonly InputActionMap m_DrawPanel;
    private IDrawPanelActions m_DrawPanelActionsCallbackInterface;
    private readonly InputAction m_DrawPanel_Draw;
    public struct DrawPanelActions
    {
        private @DrawInput m_Wrapper;
        public DrawPanelActions(@DrawInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Draw => m_Wrapper.m_DrawPanel_Draw;
        public InputActionMap Get() { return m_Wrapper.m_DrawPanel; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DrawPanelActions set) { return set.Get(); }
        public void SetCallbacks(IDrawPanelActions instance)
        {
            if (m_Wrapper.m_DrawPanelActionsCallbackInterface != null)
            {
                @Draw.started -= m_Wrapper.m_DrawPanelActionsCallbackInterface.OnDraw;
                @Draw.performed -= m_Wrapper.m_DrawPanelActionsCallbackInterface.OnDraw;
                @Draw.canceled -= m_Wrapper.m_DrawPanelActionsCallbackInterface.OnDraw;
            }
            m_Wrapper.m_DrawPanelActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Draw.started += instance.OnDraw;
                @Draw.performed += instance.OnDraw;
                @Draw.canceled += instance.OnDraw;
            }
        }
    }
    public DrawPanelActions @DrawPanel => new DrawPanelActions(this);
    private int m_DrawInputSchemeIndex = -1;
    public InputControlScheme DrawInputScheme
    {
        get
        {
            if (m_DrawInputSchemeIndex == -1) m_DrawInputSchemeIndex = asset.FindControlSchemeIndex("DrawInput");
            return asset.controlSchemes[m_DrawInputSchemeIndex];
        }
    }
    public interface IDrawPanelActions
    {
        void OnDraw(InputAction.CallbackContext context);
    }
}
